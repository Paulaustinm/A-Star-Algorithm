import heapq
import numpy as np
import matplotlib.pyplot as plt

def a_star(start, goal, obstacles, h_func):
    open_list = [(0, start)]
    closed_set = set()
    g = {start: 0}
    parent = {start: None}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            return path[::-1]

        closed_set.add(current)

        for neighbor in get_neighbors(current, obstacles):
            if neighbor in closed_set:
                continue

            tentative_g = g[current] + 1
            if neighbor not in g or tentative_g < g[neighbor]:
                g[neighbor] = tentative_g
                f = tentative_g + h_func(neighbor, goal)
                heapq.heappush(open_list, (f, neighbor))
                parent[neighbor] = current

    return None

def get_neighbors(current, obstacles):
    neighbors = []
    for action in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
        neighbor = (current[0] + action[0], current[1] + action[1])
        if (0 <= neighbor[0] < obstacles.shape[0] and 
            0 <= neighbor[1] < obstacles.shape[1] and
            obstacles[neighbor] == 0):
            neighbors.append(neighbor)
    return neighbors

def euclidean_distance(a, b):
    return np.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)

def manhattan_distance(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

import matplotlib.animation as animation

def animate_path(path, obstacles):
    fig, ax = plt.subplots()
    ax.imshow(obstacles, cmap='Greys', origin='lower')

    def update(num):
        ax.cla()
        ax.imshow(obstacles, cmap='Greys', origin='lower')
        for i in range(len(path[:num+1]) - 1):
            a, b = path[i], path[i+1]
            ax.plot([a[1], b[1]], [a[0], b[0]], color='blue')

    ani = animation.FuncAnimation(fig, update, frames=len(path), interval=500, blit=False, repeat=False)
    plt.show()


# Example usage
start = (0, 0)
goal = (9, 9)
obstacles = np.zeros((10, 10))
obstacles[4:6, 4:6] = 1
obstacles[2:4, 7:9] = 1
obstacles[7:9, 2:4] = 1

path1 = a_star(start, goal, obstacles, euclidean_distance)
animate_path(path1, obstacles)

path2 = a_star(start, goal, obstacles, manhattan_distance)
animate_path(path2, obstacles)


